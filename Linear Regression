#5 regressions

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score, accuracy_score


data = pd.read_csv('Urine data for kidney stone.csv')


y = data['calc']


scores = []


feature_sets = [
    ['gravity', 'ph'],  
    ['gravity', 'osmo', 'cond'],  
    ['ph', 'osmo', 'cond'],  
    ['gravity', 'osmo', 'cond', 'urea'],  
    ['ph', 'cond', 'urea', 'calc']  
]


threshold = y.mean()

for features in feature_sets:
   
    X = data[features]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    
    linear_model = LinearRegression()
    linear_model.fit(X_train, y_train)

   
    y_pred = linear_model.predict(X_test)

  
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)

   
    y_pred_binary = (y_pred > threshold).astype(int)
    y_test_binary = (y_test > threshold).astype(int)

    
    accuracy = accuracy_score(y_test_binary, y_pred_binary)

    
    scores.append({'Features': features, 'MSE': mse, 'R2 Score': r2, 'Accuracy': accuracy})


for i, score in enumerate(scores):
    print(f'Model {i+1}: Features = {score["Features"]}, MSE = {score["MSE"]:.4f}, R2 Score = {score["R2 Score"]:.4f}, Accuracy = {score["Accuracy"]:.4f}')
